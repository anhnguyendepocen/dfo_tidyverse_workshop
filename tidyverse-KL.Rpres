The Tidyverse: tools for data wrangling
========================================================
author: Keith Lewis
date: 2017-09-25
autosize: true
incremental: true

What is data wrangling?
========================================================
>- "The process of transforming and mapping data from one "raw" data form into another format with the intent of making it more appropriate and valuable for a variety of downstream purposes such as analytics." 
https://en.wikipedia.org/wiki/Data_wrangling

- or

>- "The art of getting your data into R in a useful form for visualisation and modelling." (http://r4ds.had.co.nz/wrangle-intro.html)

- The tidyverse helps you to data wrangle (http://tidyr.tidyverse.org/)


Data wrangling functions and programming features
========================================================
- tidyr()
- dplyr()
- pipes

About tidry()
========================================================
What is tidyr()?
  - A package that helps make tidy data (column = variable, row = observation, value = cell)

Why is it useful?
Tidyr changes the fundamental format of the data.
- long data (long typical form)
- wide data (easy for humans to read)

How does it work?
- Two fundamental tidying verbs:
  - spread() = long to wide 
  - gather() = wide to long 


Comparing tidyr with similar functions from other software
========================================================
tidyr does what:
- pivot tables do (long to wide)
- crosstab querries
  
but also the reverse!

Example #1: The dune data 
========================================================
```{r echo = TRUE}
library(tidyverse)
library(vegan)
data(dune)
dune
```

"Gather"" the dune data
========================================================
```{r}
# pseudo code: gather (data, key = "name of column for gathering", value = "name new variable")
gather(dune, key=row.names, value = "cover class") 
```

Example #2: The dune.env data 
========================================================
```{r echo = TRUE}
data(dune.env)
dune.env
```

"Spread" the dune data
========================================================
```{r }
# pseudo code: spread (key = "name of column for to make rows", value = "name new variable - makes columns)
spread(dune.env, Use, Moisture)
```

Help using tidyr()
========================================================
- extract() or unite()
- vignette("tidy-data")
- demo(package = "tidyr")
- cheatsheet (see RStudio -> Help -> Cheatsheets)

Pipes: easier programming, easier reading
========================================================

Packages to help you program
========================================================
The tidyverse has a number of packages that make programming easier
- purrr() - functional programming
- rlang() - 
- glue() - like paste()

-magrittr() - for "pipes""
http://magrittr.tidyverse.org/

What are pipes?
========================================================
From UNIX

Pipes make it easier to program and easier to read your code!

Pipes move left-had side values forward
- data operations become left-to-right
- avoid nested function calls
- make it easy to add steps in sequence of operations

Code: "%>%"

Examples #3 Pipes in action
========================================================
```{r echo = TRUE}
#spread(dune.env, Use, Moisture)
# new object <- data %>% subset on a value %>% spread data
dune.new <- dune.env %>%
  subset(Management == "HF") %>%
  spread(Use, Moisture)
dune.new
```

When not to use pipes (according to Hadley)
========================================================
- Pipes of more than 10 steps (hard to debug)

- Multiple inputs and outputs

- Complex graphs

Note: you don't HAVE to use pipes

Help with pipes
========================================================
Tidyverse webiste: http://magrittr.tidyverse.org/

"R for Data Science" http://r4ds.had.co.nz/pipes.html

dplyr()
========================================================
- summarize data
- mutate new variables
- group data by a variable
- join data sets

summarize()
========================================================
- Turns multiple rows into a single

- Split-apply-combine


Exampe #4 summarise()
========================================================
```{r echo = TRUE}
# new object <- data %>% summarise by counting each type cover class
dune.all <- cbind(dune, dune.env)

dune.summary <- dune.all %>%
  count(Achimill)
dune.summary
```

Exampe #4 summarise() continued
========================================================
```{r echo = TRUE}
# new object <- data %>% summarise by counting each type of cover class by Management type

dune.summary <- dune.all %>%
  group_by(Management) %>%
  count(Achimill)
dune.summary
```


```{r echo = TRUE}
# tally does something a little different - be careful!
dune.summary <- dune.all %>%
  group_by(Management) %>%
  tally(Achimill)
dune.summary
```


Exampe #5 mutate() - Create a new variable
========================================================
```{r echo = TRUE}
## examples
dune.mutate <- dune.all %>%
    mutate(sum_sp = Achimill + Agrostol)  

dune.mutate[c("Achimill", "Agrostol", "sum_sp")]
```

Exampe #5 mutate() - Create a new variable continued
========================================================
```{r echo = TRUE}
dune.mutate <- dune.all %>%
    mutate(test = between(Achimill, 2, 3))
dune.mutate[c("Achimill", "test")]
```

Help dplyr
========================================================
- cheatsheet (see RStudio -> Help -> Cheatsheets)